Write  a PL/SQL program using else-if ladder ?
DECLARE
   score NUMBER := 85;  -- You can change the score to test
BEGIN
   IF score >= 90 THEN
      DBMS_OUTPUT.PUT_LINE('Grade: A');
   ELSIF score >= 80 THEN
      DBMS_OUTPUT.PUT_LINE('Grade: B');
   ELSIF score >= 70 THEN
      DBMS_OUTPUT.PUT_LINE('Grade: C');
   ELSIF score >= 60 THEN
      DBMS_OUTPUT.PUT_LINE('Grade: D');
   ELSE
      DBMS_OUTPUT.PUT_LINE('Grade: F');
   END IF;
END;
---------------------------------------------------------------------

Write a PL/SQL program to fine out factorial of a given number
DECLARE
   n NUMBER := 5;         -- You can change this number
   fact NUMBER := 1;
BEGIN
   FOR i IN 1..n LOOP
      fact := fact * i;
   END LOOP;

   DBMS_OUTPUT.PUT_LINE('Factorial is: ' || fact);
END;
------------------------------------------------------------------

Write a PL/SQL program to demonstrate functions.
-- Step 1: Create the function
CREATE OR REPLACE FUNCTION get_square(num IN NUMBER)
RETURN NUMBER
IS
   result NUMBER;
BEGIN
   result := num * num;
   RETURN result;
END;
/

-- Step 2: Call the function from a PL/SQL block
DECLARE
   input NUMBER := 6;
   output NUMBER;
BEGIN
   output := get_square(input);
   DBMS_OUTPUT.PUT_LINE('Square of ' || input || ' is: ' || output);
END;
----------------------------------------------------------------------

Write a PL/SQL code to demonstrate a simple cursor
DECLARE
    CURSOR emp_cursor IS
        SELECT emp_id, emp_name FROM EMPLOYEE;

    v_id employees.emp_id%TYPE;
    v_name employees.emp_name%TYPE;
BEGIN 
    OPEN emp_cursor
    LOOP
        FETCH emp_cursor INTO v_id, v_name;
        EXIT WHEN emp_cursor%NOTFOUND;

        DBMS_OUTP.PUT_LINE('ID: '|| v_id || ', Name: ' || v_name);
    END LOOP;
    CLOSE emp_cursor
END;
------------------------------------------------------------------------

Write a pl sql program using for loop 
BEGIN
    FOR i IN 1..20 LOOP 
        IF i%2 == 0 THEN 
            DBMS_OUTPUT.PUT_LINE('Even number : '|| i);
        END IF;
    END LOOP;
END;
-------------------------------------------------------------------------

Write a pl/sql program to print all prime numbers between 1 to 1000
BEGIN
   FOR n IN 2..1000 LOOP
      DECLARE
         is_prime BOOLEAN := TRUE;
      BEGIN
         FOR i IN 2..n-1 LOOP
            IF MOD(n, i) = 0 THEN
               is_prime := FALSE;
               EXIT;
            END IF;
         END LOOP;

         IF is_prime THEN
            DBMS_OUTPUT.PUT_LINE(n || ' is Prime');
         END IF;
      END;
   END LOOP;
END;
-------------------------------------------------------------------------   
                    
Write a pl/sql program to perform all arithmetic operations
DECLARE
   a NUMBER := 20;
   b NUMBER := 5;
   sum_result        NUMBER;
   diff_result       NUMBER;
   prod_result       NUMBER;
   div_result        NUMBER;
   mod_result        NUMBER;
BEGIN
   sum_result  := a + b;
   diff_result := a - b;
   prod_result := a * b;
   div_result  := a / b;
   mod_result  := MOD(a, b);

   DBMS_OUTPUT.PUT_LINE('Addition: ' || sum_result);
   DBMS_OUTPUT.PUT_LINE('Subtraction: ' || diff_result);
   DBMS_OUTPUT.PUT_LINE('Multiplication: ' || prod_result);
   DBMS_OUTPUT.PUT_LINE('Division: ' || div_result);
   DBMS_OUTPUT.PUT_LINE('Modulus: ' || mod_result);
END;
-------------------------------------------------------------------------

Write a PL/SQL Program for Fibonacci Series
DECLARE
    n NUMBER := 10;
    a NUMBER := 0;
    b NUMBER := 1;
    t NUMBER;
BEGIN
    DBMS_OUTPUT.PUT_LINE('Fibonacci Series up to ' || n || ' terms:');
    DBMS_OUTPUT.PUT_LINE(a);
    DBMS_OUTPUT.PUT_LINE(b);

    FOR i IN 3..n LOOP
        t := a + b;
        DBMS_OUTPUT.PUT_LINE(t);
        a := b;
        b := t;
    END LOOP;
END;
-------------------------------------------------------------------------

Write a PL/SQL Program to Check Number is Odd or Even
DECLARE
    n NUMBER := 20;
BEGIN
    IF MOD(n, 2) = 0 THEN
        DBMS_OUTPUT.PUT_LINE(n || ' is even');
    ELSE
        DBMS_OUTPUT.PUT_LINE(n || ' is odd');
    END IF;
END;
-------------------------------------------------------------------------

Write a PL/SQL Program to Find Greatest of Three Numbers
DECLARE
    a NUMBER := 42;
    b NUMBER := 25;
    c NUMBER := 78;
BEGIN
    IF a > b AND a > c THEN
        DBMS_OUTPUT.PUT_LINE(a || ' is the greatest');
    ELSIF b > c THEN
        DBMS_OUTPUT.PUT_LINE(b || ' is the greatest');
    ELSE
        DBMS_OUTPUT.PUT_LINE(c || ' is the greatest');
    END IF;
END;
------------------------------------------------------------------------

Write a PL/SQL code using simple case statement
DECLARE
    marks NUMBER := 85;
    grade CHAR(1);
BEGIN
    CASE 
        WHEN marks >= 90 THEN
            grade := 'A';
        WHEN marks >= 75 THEN
            grade := 'B';
        WHEN marks >= 60 THEN
            grade := 'C';
        WHEN marks >= 40 THEN
            grade := 'D';
        ELSE
            grade := 'F';
    END CASE;

    DBMS_OUTPUT.PUT_LINE('Marks: ' || marks);
    DBMS_OUTPUT.PUT_LINE('Grade: ' || grade);
END;
-------------------------------------------------------------------------

Write a PL/SQL Program to Print Table of a Number
DECLARE
    num NUMBER := 5;  -- You can change this to any number
    result NUMBER;
BEGIN
    DBMS_OUTPUT.PUT_LINE('Multiplication Table of ' || num || ':');

    FOR i IN 1..10 LOOP
        result := num * i;
        DBMS_OUTPUT.PUT_LINE(num || ' x ' || i || ' = ' || result);
    END LOOP;
END;
-------------------------------------------------------------------------

Write a Pl/SQl procedure to find the cube of  a given number
DECLARE
    n NUMBER := 2;
    s NUMBER;
BEGIN
    s := n * n * n;
    DBMS_OUTPUT.PUT_LINE('Cube of ' || n || ' is : ' || s);
END;
-----------------------------------------------------------------------

Write a PL/SQL Program using a While loop
DECLARE
    i NUMBER := 1;
BEGIN
    DBMS_OUTPUT.PUT_LINE('Numbers from 1 to 10:');
    
    WHILE i <= 10 LOOP
        DBMS_OUTPUT.PUT_LINE(i);
        i := i + 1;
    END LOOP;
END;
